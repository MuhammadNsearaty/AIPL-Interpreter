options
{
  static = true;
}

PARSER_BEGIN(Parser)
package com.parser;
import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.util.TreeSet;

import nodes.*;

public class Parser
{
  public static void main(String args []) throws Exception {
    BufferedInputStream stream = new BufferedInputStream(new FileInputStream("newText.txt"));
    new Parser(stream);
    AbstractTreeNode node = start();
    node.execute(new Context());
  }
  
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS :
    "+"
  | "-" >
| < MULTIPLY :
    "*"
  | "/"
  |  "%" >
| < POWER : "^" >
| < EQ : "=" >
| < LT : "<" >
| < GT : ">" >
| < LET : < LT > < EQ > >
| < GET : < GT > < EQ > >
| < NEQ : < LT > < GT > >
| < OR : "|">
| < AND : "$" >
| < NOT : "~" >
| < assignment :
    ":="
  | "+="
  | "-="
  | "*="
  | "/=" >
}

TOKEN :
{
  < #DIGIT : [ "0"-"9" ] >
| < NUM : (< DIGIT >)+ >
| < END : "!" >
| < FLOOP : "&" >
| < WLOOP : "@" >
| < LP : "(" >
| < RP : ")" >
| < FUNCTION : "func" >
| < DEF : "def">
| < DATA : "int" | "double" | "char" | "string">
| < #FLOATINGPOINT : "." < NUM > >
| < DOUBLE :
    < NUM > (< FLOATINGPOINT >)?
    (
      (
        "E"
      | "e"
      )
      (
        (
          "+"
        | "-"
        )?
      )
      < NUM > (< FLOATINGPOINT >)?
    )? >
| < #LETTER :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < VAR :
    (
      "_"
    | < LETTER >
    )
    (
      < DIGIT >
    | < LETTER >
    | "_"
    )* >
| < IF : "?" >
| < ELSE : "??" >
| < READ : "<-" >
| < WRITE : "->" >
| < COLON : ":" >
| < SIMICOLON : ";" >
| < Quotation : "\'">
| < DQuotation : "\"" >
| < STRING : <  DQuotation > (~["\""])* <  DQuotation >>
| < CHAR : < Quotation > (~["\'"])? < Quotation >> 
}
DefNode def():
{
  DefNode ret = new DefNode();
  Token t;
}
{    < DEF > t = <VAR > { ret.setVarName(t.image); } < COLON > t = < DATA >
   
  { ret.setVarType(t.image);
  	return ret;
   }
  
}
BlockNode start() :
{
  BlockNode bnode = new BlockNode();
  AbstractTreeNode n;
  FunctionNode fnode;
  ExpressionNode enode;
}
{
  (
    (
      fnode = Func(null)
      {
        Context.functionMap.put(fnode.getFunctionId(), fnode);
      }
    )
  |
    (
      n = Statement()
      {
        bnode.addChild(n);
      }
    )
  )+
  < EOF >
  {
    return bnode;
  }
}

FunctionNode Func(FunctionNode ancestor) :
{
  FunctionNode myFunc,fnode = new FunctionNode(), par;
  if(ancestor != null)
  	par = ancestor;
  else
  	par = fnode;
  fnode.setAncestor(par);
  Token t;
  ExpressionNode enode;
  AbstractTreeNode n;
}
{
  < FUNCTION > < LP >
  (
    t = < DATA >
    {
		fnode.getParTypes().add(t.image);
    }
    t = < VAR >
    {
      fnode.getParIds().add(t.image);
    }
    (
      ","
	  t = < DATA >
	  {
		fnode.getParTypes().add(t.image);
	  }
      t = < VAR >
      {
        fnode.getParIds().add(t.image);
      }
    )*
  )?
  < RP > < WRITE > t = < VAR >
  {
    fnode.setFunctionId(t.image);
  }
  < COLON >
  ( 
        myFunc = Func(par)

    {

		fnode.addFunction(myFunc);
		myFunc.setAncestor(par);
    } |  
  (
    n = Statement()
    {
      fnode.addChild(n);
    }
  )
)*
  < END >
  {
    return fnode;
  }
}

FunctionCallNode CAllFUNCTION():
{
  FunctionCallNode enode = new FunctionCallNode();
  AbstractTreeNode n, s;
  Token t;
}
{
  t = < VAR > 
  < LP >
  (
    (n = E() | n = Strings() | n = Chars())
    {
      enode.addChild(n);
    }
    (
      "," (n = E() | n = Strings() | n = Chars())
      {
        enode.addChild(n);
      }
    )*
  )?
  < RP >
  {
    enode.setOperation(t.image);
    return enode;
  }
}

ExpressionNode E() :
{
  ExpressionNode enode = new ExpressionNode();
  ExpressionNode node1;
  ExpressionNode node2 = null;
  Token t = new Token();
}
{
  node1 = F()
  (
    t = < PLUS > node2 = E()
  )?
  {
    enode.setOperation(t.image);
    enode.addChild(node1);
    if (node2 != null)
    {
      enode.addChild(node2);
      return enode;
    }
    else 
    return node1;
  }
}


ExpressionNode F() :
{
  ExpressionNode fnode = new ExpressionNode();
  ExpressionNode node1;
  ExpressionNode node2 = null;
  Token t = new Token();
}
{
  node1 = Exp()
  (
    t = < MULTIPLY > node2 = F()
  )?
  {
    fnode.setOperation(t.image);
    fnode.addChild(node1);
    if (node2 != null)
    {
      fnode.addChild(node2);
      return fnode;
    }
    else 
    return node1;
  }
}

ExpressionNode Exp() :
{
  ExpressionNode expnode = new ExpressionNode();
  ExpressionNode node1;
  ExpressionNode node2 = null;
  Token t = new Token();
}
{
  node1 = N()
  (
    t = < POWER > node2 = Exp()
  )?
  {
    expnode.setOperation(t.image);
    expnode.addChild(node1);
    if (node2 != null)
    {
      expnode.addChild(node2);
      return expnode;
    }
    else 
    return node1;
  }
}

ExpressionNode N() :
{
  ExpressionNode enode = new ExpressionNode();
  ExpressionNode node1 = null;
  ConstantNode conNode = null;
  VariableNode varNode = null;
  Token t = new Token();
}
{
  (
    LOOKAHEAD(2)
    node1 = CAllFUNCTION()
  | 
    t = < DOUBLE >
    {
      conNode = new ConstantNode();
      conNode.setValue(t.image);
    }
  | 
    t = < VAR >
    {
      varNode = new VariableNode();
      varNode.setVarId(t.image);
    }
  | 
    t = < NUM >
    {
      conNode = new ConstantNode();
      conNode.setValue(t.image);
    }
  |
    < LP > node1 = E() < RP >
  )
  {
    if (node1 != null)
    {
      return node1;
    }
    else 
    if (varNode != null) 
    return varNode;
    else 
    return conNode;
  }
}

ForNode For() :
{
  Token t = new Token();
  ForNode fnode = new ForNode();
  ExpressionNode enode1, enode2, enode3;
  enode3 = new ConstantNode(1);
  BlockNode bnode = new BlockNode();
  AbstractTreeNode n;
}
{
  < FLOOP > t = < VAR > < COLON > 
  enode1 = E() < WRITE > enode2 = E()
  (
    < COLON > enode3 = E()
  )?
  (
    n = Statement()
    {
      bnode.addChild(n);
    }
  )+
  < END >
  {
    fnode.setVarName(t.image);
    fnode.addChild(enode1);
    fnode.addChild(enode2);
    fnode.addChild(enode3);
    fnode.addChild(bnode);
    return fnode;
  }
}

ConditionNode Or() :
{
  Token t = new Token();
  ConditionNode cnode1 ,cnode2 = null;
  OrNode node = new OrNode();  
}
{
  cnode1  = And()
  (    
  < OR >
  cnode2 = Or()
  )?
  {
    if(cnode2 != null) {
    	node.addChild(cnode1);
	    node.addChild(cnode2);
   		 return node;
 	}
 	else
 		return cnode1;
  }
}

ConditionNode And() :
{
  Token t = new Token();
  ConditionNode cnode1 ,cnode2 = null;
  AndNode node = new AndNode();  
}
{
  cnode1  = Not()
  (
	< AND >
  	cnode2 = And()   )?   	
  {
    if(cnode2 != null) {
    	node.addChild(cnode1);
	    node.addChild(cnode2);
   		 return node;
 	}
 	else
 		return cnode1;
  }
}
ConditionNode Not() :
{
  Token t = null;
  ConditionNode cnode1 ,cnode2 = null;
  NotNode node = new NotNode(); 
}
{
  (
	t = < NOT >

  )?
  cnode1  = Condition()
   	
  {
    if(t != null) {
    	node.addChild(cnode1);
   		return node;
 	}
 	else
 		return cnode1;
  }
}

ConditionNode Condition() :
{
  Token t = new Token();
  ConditionNode cnode = new ConditionNode();
  ConditionNode node1 = null;
  ExpressionNode enode1 = null;
  ExpressionNode enode2 = null;
}
{
(
  LOOKAHEAD(3)
  (
    < LP > node1 = Or() < RP >
  )|    LOOKAHEAD(3)
  (
  enode1 = E()
  (
    t = < EQ >
  | t = < LT >
  | t = < GT >
  | t = < LET >
  | t = < GET >
  | t = < NEQ >
  )
  enode2 = E()
  )| LOOKAHEAD(3)(
    (      enode1 = Strings()
	| t = < VAR > { enode1 = new VariableNode(t.image);} 
	)
    (
      t = < EQ >
    | t = < NEQ >    )
    (
      enode2 = Strings()
	| t = < VAR > { enode2 = new VariableNode(t.image);} 
	)
  )
| LOOKAHEAD(3)(
    (
      enode1 = Chars()
	| t = < VAR > { enode1 = new VariableNode(t.image);} 
	)
    (
      t = < EQ >
    | t = < NEQ >
    )
    (
      enode2 = Chars()
	| t = < VAR > { enode2 = new VariableNode(t.image);} 
	)
  )
)
  {
    if(node1 != null)
    	return node1;
    cnode.setOperation(t.image);
    cnode.addChild(enode1);
    cnode.addChild(enode2);
    return cnode;
  }
}

WhileNode While() :
{
  WhileNode wnode = new WhileNode();
  BlockNode bnode = new BlockNode();
  AbstractTreeNode n, s;
}
{
  < WLOOP > < LP > n = Or() < RP >
  (
    s = Statement()
    {
      bnode.addChild(s);
    }
  )+
  < END >
  {
    wnode.addChild(n);
    wnode.addChild(bnode);
    return wnode;
  }
}

IfNode IF() :
{
  Token t = new Token();
  IfNode ifNode = new IfNode();
  ElseNode enode = new ElseNode();
  ConditionNode cnode;
  BlockNode bnode1 = new BlockNode();
  BlockNode bnode2 = null;
  AbstractTreeNode n;
}
{
  t = < IF > < LP > cnode = Or() < RP >
  (
    n = Statement()
    {
      bnode1.addChild(n);
    }
  )*
  (
    < ELSE >
    {
      bnode2 = new BlockNode();
    }
    (
      n = Statement()
      {
        bnode2.addChild(n);
      }
    )+
    {
      enode.addChild(bnode2);
    }
  )?
  < END >
  {
    ifNode.addChild(cnode);
    ifNode.addChild(bnode1);
    if (bnode2 != null) 
    ifNode.addChild(enode);
    return ifNode;
  }
}
StringNode Strings():
{
  Token t;
}
{
	t  = < STRING >
  {
    return new StringNode(t.image);
  }
}
CharNode Chars():
{
  Token t;
}
{
  t = < CHAR >
  {
    return new CharNode(t.image);
  }
}
AssignmentNode Assignment() :
{
  Token t = null, t1 = null;
  AssignmentNode anode = new AssignmentNode();
  AbstractTreeNode n = null;
}
{
  t = < VAR > t1 = < assignment > (n = E() | n = Strings() | n = Chars())
  {
    anode.setvarId(t.image);
    anode.setOperation(t1.image);
    anode.addChild(n);
    return anode;
  }
}

ReadNode Read() :
{
  ReadNode n = new ReadNode();
  Token t;
}
{
  < READ > t = < VAR >
  {
    n.setVarName(t.image);
    return n;
  }
}

WriteNode Write() :
{
  WriteNode wnode = new WriteNode();
  ExpressionNode enode;
}
{
  < WRITE > (enode = E() | enode = Strings() | enode = Chars())
  {
    wnode.addChild(enode);
    return wnode;
  }
}


AbstractTreeNode Statement() :
{
  AbstractTreeNode n = null;
}
{
  (
    LOOKAHEAD(2)
    n = CAllFUNCTION() < SIMICOLON >
  | n = Assignment() < SIMICOLON >
  | 
    n = IF()
  | n = While()
  | n = Read() < SIMICOLON >
  | 
    n = Write() < SIMICOLON >
  | n = For()
  | n = def() < SIMICOLON >
  )
  {
    return n;
  }
}
